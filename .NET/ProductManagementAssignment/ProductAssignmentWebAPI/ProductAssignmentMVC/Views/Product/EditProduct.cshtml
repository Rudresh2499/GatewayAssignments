@model ProductAssignmentMVC.Models.mvcProductDetail

@{
    ViewBag.Title = "EditProduct";
}

<h2>Edit Product Details</h2>

@using ProductAssignmentMVC.Models
@using (Html.BeginForm("EditProduct","Product",FormMethod.Post, new { enctype = "multipart/form-data" })) 
{
    @Html.AntiForgeryToken()

        <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Select Product Category", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="form-control" name="categoryId">
                    <option>--Select a Category--</option>
                    @{
                        IEnumerable<mvcProductCategory> categoryDetails = (IEnumerable<mvcProductCategory>)ViewData["categoryDetails"];
                        foreach (mvcProductCategory tempCategory in categoryDetails)
                        {
                            if (Model.CategoryId == tempCategory.Id)
                            {
                                <option value="@tempCategory.Id" selected="selected">@tempCategory.CategoryName</option>
                            }
                            else
                            {
                                <option value="@tempCategory.Id">@tempCategory.CategoryName</option>
                            }
                        }
                    }
                </select>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="form-control" name="Quantity">
                    <div class="dropdown-menu">
                        @for (int i = 1; i <= 100; i++)
                        {
                            if (Model.Quantity == i)
                            {
                                <option class="dropdown-item" value="@i" selected="selected">@i.ToString()</option>
                            }
                            else
                            {
                                <option class="dropdown-item" value="@i">@i.ToString()</option>
                            }
                        }
                    </div>
                </select>
                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShortDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ShortDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LongDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.LongDescription, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LongDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Upload Small Image", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="SmallImageFile" accept="image/png, image/jpeg, image/jpg" class="form-control" style="display:inline-block"/>
                <img src="@Url.Content(Model.SmallImageDetail.Path)" style="max-height: 50px; max-width: 50px; padding: 2px;" />
                <span><strong>&laquo; Currently Uploaded image</strong></span>
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Upload Large Image", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="LargeImageFile" accept="image/png, image/jpeg, image/jpg" class="form-control" style="display: inline-block;" />
                @if(ViewBag.LargeImagePath != null)
                {
                    <img src="@Url.Content(ViewBag.LargeImagePath)" style="max-height: 50px; max-width: 50px; padding: 2px;" />
                    <span><strong>&laquo; Currently Uploaded image</strong></span>
                }
                else
{
                    <span><strong>No Image Uploaded</strong></span>
                }
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save Changes" class="btn btn-info" />
            </div>
        </div>
    </div>
}

<div>
    <a href="@Url.Action("Dashboard","Dashboard")" class="btn btn-default">&laquo;Back to Dasboard</a>
</div>
